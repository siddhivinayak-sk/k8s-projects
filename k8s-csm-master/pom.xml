<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<!--<version>1.5.10.RELEASE</version>-->
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.bank</groupId>
	<artifactId>csm</artifactId>
	<version>0.1</version>
	<packaging>jar</packaging>
	<name>bank_csm</name>
	<description>Bank Applicaiton - Customer Service Management</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<spring-cloud.version>Finchley.SR1</spring-cloud.version>	
		<node.installDir>C:\Program Files\</node.installDir>
		<node.env>dev</node.env>
	</properties>

	<dependencies>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-rest</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
	  <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
      </dependency>
  	  <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
	  </dependency>
 	  <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
  	  </dependency>  
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-core</artifactId>
		    <version>5.3.0.Final</version>
		</dependency>
		<dependency>
		    <groupId>org.hibernate</groupId>
		    <artifactId>hibernate-ehcache</artifactId>
		    <version>5.3.0.Final</version>
		</dependency>
	  <dependency>
			<groupId>org.json</groupId>
			<artifactId>org.json</artifactId>
			<version>chargebee-1.0</version>
	   </dependency>
	   <dependency>
	   		<groupId>com.h2database</groupId>
	   		<artifactId>h2</artifactId>
	   		<scope>runtime</scope>
	   </dependency>
	   <dependency>
	   		<groupId>io.springfox</groupId>
	   		<artifactId>springfox-swagger2</artifactId>
	   		<version>2.8.0</version>
	   </dependency>
	   <dependency>
	   		<groupId>io.springfox</groupId>
	   		<artifactId>springfox-swagger-ui</artifactId>
	   		<version>2.8.0</version>
	   </dependency>
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.17</version>
		</dependency>
	   

	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement> 
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!--
			<plugin>
				<groupId>com.github.eirslett</groupId>	
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.3</version>
				<configuration>
                    <installDirectory>${node.installDir}</installDirectory>
                    <workingDirectory>src/main/frontend</workingDirectory>
                </configuration>
				<executions>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>npm run build</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
							<arguments>run ${node.env}</arguments>
                        </configuration>
                    </execution>
                </executions>
			</plugin>
			-->
			<plugin>
			  <groupId>io.github.michaldo</groupId>
			  <artifactId>nashorn-maven-plugin</artifactId>
			  <version>0.0.2</version>
			  <executions>
			    <execution>
			      <phase>process-resources</phase>
			      <goals>
			        <goal>eval</goal>
			      </goals>
			      <configuration>
			        <script>
			        	var LocalDateTime = Java.type('java.time.LocalDateTime');
			        	var now = LocalDateTime.now();
			        	var version = "${project.version}";
						var buildNumber = now.getYear() + "_" + now.getMonthValue() + "_" + now.getDayOfMonth() + "_" + now.getHour() + "_" + now.getMinute() + "_" + now.getSecond() + "-1";
						var versionLine = "public static final String VERSION = \"" + version + "\";";
						var buildLine = "public static final String BUILD = \"" + buildNumber + "\";";
						var path = java.nio.file.Paths.get($basedir + "/src/main/java/com/bank/csm/constants", 'BuildConstants.java');
						var Files = Java.type('java.nio.file.Files');
						var String = Java.type("java.lang.String");
						var StandardOpenOption = Java.type("java.nio.file.StandardOpenOption");
						var data = new String(Files.readAllBytes(path));
						data = data.replaceAll("public static final String VERSION = (.+?);", versionLine);
						data = data.replaceAll("public static final String BUILD = (.+?);", buildLine);
						Files.deleteIfExists(path);
						Files.write(path, data.getBytes(), StandardOpenOption.CREATE);
			        </script>
			      </configuration>
			    </execution>
			  </executions>
			</plugin>    	

			<!--plugin>
			  <groupId>com.spotify</groupId>
			  <artifactId>dockerfile-maven-plugin</artifactId>
			  <version>0.9.0</version>

			  <dependencies>
				<dependency>
					<groupId>com.google.code.gson</groupId>
					<artifactId>gson</artifactId>
					<version>2.8.0</version>
				</dependency>
			  </dependencies>

			  <executions>
				<execution>
				  <id>default</id>
				  <goals>
					<goal>build</goal>
					<goal>push</goal>
				  </goals>
				</execution>
			  </executions>
			  <configuration>
				<repository>bank/csm</repository>
				<tag>${project.version}</tag>
				<buildArgs>
				  <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
				</buildArgs>
			  </configuration>
			</plugin-->

	<plugin>
      <groupId>com.spotify</groupId>
      <artifactId>docker-maven-plugin</artifactId>
      <version>1.2.2</version>
      <configuration>
        <imageName>hub.docker.local:5000/bank/csm</imageName>
        <dockerDirectory>docker</dockerDirectory>
		<imageTags>
			<imageTag>latest</imageTag>
		</imageTags>
		<forceTags>true</forceTags>
        <resources>
           <resource>
             <targetPath>/</targetPath>
             <directory>${project.build.directory}</directory>
             <include>${project.build.finalName}.jar</include>
           </resource>
        </resources>
      </configuration>
    </plugin>
			
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											io.github.michaldo
										</groupId>
										<artifactId>
											nashorn-maven-plugin
										</artifactId>
										<versionRange>
											[0.0.2,)
										</versionRange>
										<goals>
											<goal>eval</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	
	
</project>
